// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts Post[]

  roles UserToRole[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model UserToRole {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId Int
  user   User @relation(fields: [userId], references: [id])
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Role {
  id        Int      @id @default(autoincrement())
  type      RoleType @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       UserToRole[]
  permissions RoleToPermission[]
}

model RoleToPermission {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Permission {
  id        Int       @id @default(autoincrement())
  operation Operation
  target    Target
  resource  Resource
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  roles RoleToPermission[]
}

enum RoleType {
  ADMIN
  USER
}

enum Operation {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Target {
  ANY
  OWN
}

enum Resource {
  POST
  USER
}
